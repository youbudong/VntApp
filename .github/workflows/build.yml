name: VntApp

on:
  push:
    tags:
      - '*' 

env:
  CARGO_TERM_COLOR: always
permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.NAME }}
    strategy:
      fail-fast: false
      matrix:
        include:
        
          - NAME: vntApp-android
            OS: ubuntu-latest
            flutter-version: 3.22.0
            
          - NAME: vntApp-windows
            OS: windows-2022
            flutter-version: 3.24.5
            
    runs-on: ${{ matrix.OS }}
    steps:
      - uses: actions/checkout@v4
        
      - name: 设置JDK环境
        if: matrix.NAME == 'vntApp-android'
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: 17
          
      - name: 设置NDK环境
        if: matrix.NAME == 'vntApp-android'
        run: |
           wget -q https://dl.google.com/android/repository/android-ndk-r26d-linux.zip
           unzip -q android-ndk-r26d-linux.zip -d /opt/ndk

      - name: 设置Flutter环境
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: ${{ matrix.flutter-version }}

      - name: 替换 Flutter 引擎为支持 Windows 7 的版本
        if: matrix.NAME == 'vntApp-windows'
        shell: pwsh
        run: |
          flutter doctor -v
          flutter precache --windows
          Expand-Archive -Path ".github/patches/windows-x64-release.zip" -DestinationPath "windows-x64-release"
          Copy-Item -Path "windows-x64-release/*" -Destination "C:/hostedtoolcache/windows/flutter/stable-${{ matrix.flutter-version }}-x64/bin/cache/artifacts/engine/windows-x64-release/" -Recurse -Force
          
      - name: 打补丁以启用 Dropdown Menu 过滤支持
        if: matrix.NAME == 'vntApp-windows'
        shell: bash
        run: |
          cp .github/patches/flutter_3.24.4_dropdown_menu_enableFilter.diff $(dirname $(dirname $(which flutter)))
          cd $(dirname $(dirname $(which flutter)))
          git apply flutter_3.24.4_dropdown_menu_enableFilter.diff || true

      - name: Install Android rust target
        if: matrix.NAME == 'vntApp-android'
        run: |
           rustup target add aarch64-linux-android
           rustup target add armv7-linux-androideabi
           rustup target add x86_64-linux-android
           rustup target add i686-linux-android
        
      - name: 构建安卓so库
        if: matrix.NAME == 'vntApp-android'
        run: |
           cd rust
           rm -rf .cargo/config
           export PATH=/opt/ndk/android-ndk-r26d:/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH  
           cat >>./.cargo/config <<EOF
            [target.armv7-linux-androideabi]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"

            [target.aarch64-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang"

            [target.i686-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"

            [target.x86_64-linux-android]
            ar = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            linker = "/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android21-clang"
           EOF
           echo -e "\n\033[1;32m构建 aarch64-linux-android\033[0m\n"
           cargo build --target aarch64-linux-android --release
           mv -f target/aarch64-linux-android/release/*.so android/app/src/main/jniLibs/arm64-v8a/librust_lib_vnt_app.so
          
           cargo clean
           echo -e "\n\033[1;32m构建 x86_64-linux-android\033[0m\n"
           cargo build --target x86_64-linux-android --release
           mv -f target/x86_64-linux-android/release/*.so android/app/src/main/jniLibs/x86_64/librust_lib_vnt_app.so
          
           cargo clean
           echo -e "\n\033[1;32m构建 i686-linux-android\033[0m\n"
           export CC_i686_linux_android="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
           export CC="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android21-clang"
           cargo build --target i686-linux-android --release 
           mv -f target/i686-linux-android/release/*.so android/app/src/main/jniLibs/x86/librust_lib_vnt_app.so

           cargo clean
           echo -e "\n\033[1;32m构建 armv7-linux-androideabi\033[0m\n"
           export CC_armv7_linux_androideabi="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
           export CC="/opt/ndk/android-ndk-r26d/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang"
           cargo build --target armv7-linux-androideabi --release 
           mv -f target/armv7-linux-androideabi/release/*.so android/app/src/main/jniLibs/armeabi-v7a/librust_lib_vnt_app.so
           
      - name: 构建 Android vntAPP
        if: matrix.NAME == 'vntApp-android'
        run: |
         #sed -i 's|branch = "1.2.x"|rev = "501a9e8"|' rust/Cargo.toml
         
         sed -i '0,/local_ipv4,/{s/local_ipv4,/local_ipv4.map(|ip| ip.to_string()),/}' rust/src/api/vnt_api.rs
         sed -i '/ErrorType::Unknown => RustErrorType::Unknown,/a\    _ => RustErrorType::Unknown,' rust/src/api/vnt_api.rs
         
         flutter clean
         flutter doctor -v
         flutter pub get
         flutter build apk --release 
         find . -type f -name "*.apk"
         mkdir -p /opt/vntAPP
         #mv -f build/app/outputs/apk/release/app-release.apk app-release.apk
         mv -f build/app/outputs/flutter-apk/app-release.apk app-release.apk

      - name: 构建 Windows vntAPP
        if: matrix.NAME == 'vntApp-windows'
        shell: pwsh
        run: |
          flutter pub get
          flutter build windows --release -v

          echo "构建完成，开始列出生成的文件"
          Get-ChildItem build\windows\x64\runner\Release

          Set-Location build\windows\x64\runner\Release

          Compress-Archive -Path * -DestinationPath $Env:GITHUB_WORKSPACE/vntApp-windows.zip -Force
         
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.NAME }}
          path: ${{ runner.os == 'Windows' && 'vntApp-windows.zip' || 'app-release.apk' }}

  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: |
          	./artifacts/vntApp-windows/vntApp-windows.zip
          	./artifacts/vntApp-android/app-release.apk
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
